// First, let's create our package.json with necessary dependencies
{
  "name": "4xtrapip-frontend",
  "version": "1.0.0",
  "private": true,
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.21.0",
    "axios": "^1.6.2",
    "@tanstack/react-query": "^5.13.4",
    "tailwindcss": "^3.3.6",
    "lucide-react": "^0.263.1",
    "recharts": "^2.10.3",
    "@radix-ui/react-dialog": "^1.0.5",
    "date-fns": "^2.30.0"
  },
  "scripts": {
    "start": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "devDependencies": {
    "@vitejs/plugin-react": "^4.2.1",
    "vite": "^5.0.7"
  }
}

// src/App.jsx
import React from 'react';
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import Navigation from './components/common/Navigation';
import Home from './pages/Home';
import Dashboard from './pages/Dashboard';
import Bootcamp from './pages/Bootcamp';

const queryClient = new QueryClient();

const App = () => {
  return (
    <QueryClientProvider client={queryClient}>
      <BrowserRouter>
        <Navigation />
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/dashboard" element={<Dashboard />} />
          <Route path="/bootcamp" element={<Bootcamp />} />
        </Routes>
      </BrowserRouter>
    </QueryClientProvider>
  );
};

export default App;

// src/context/AuthContext.js
import React, { createContext, useContext, useState } from 'react';

const AuthContext = createContext(null);

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);

  const login = async (credentials) => {
    // API call here
    try {
      // const response = await api.login(credentials);
      // setUser(response.data);
    } catch (error) {
      throw new Error('Login failed');
    }
  };

  const logout = () => {
    setUser(null);
  };

  return (
    <AuthContext.Provider value={{ user, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => useContext(AuthContext);

// src/hooks/useMarketData.js
import { useQuery } from '@tanstack/react-query';
import axios from 'axios';

export const useMarketData = () => {
  return useQuery({
    queryKey: ['marketData'],
    queryFn: async () => {
      const { data } = await axios.get('/api/market-data');
      return data;
    },
    refetchInterval: 5000 // Refetch every 5 seconds
  });
};

// src/utils/api.js
import axios from 'axios';

const api = axios.create({
  baseURL: import.meta.env.VITE_API_URL || 'http://localhost:3000',
  headers: {
    'Content-Type': 'application/json'
  }
});

api.interceptors.request.use((config) => {
  const token = localStorage.getItem('token');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

export default api;
